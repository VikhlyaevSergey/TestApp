//
//  AutorizationPresenter.swift
//  Test
//
//  Created by Сергей Вихляев on 24/02/2019.
//  Copyright (c) 2019 Сергей Вихляев. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

class Validator {

    func isValidEmail(text: String) -> Bool {
        let emailFormat = "[A-Z0-9a-z._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,64}"
        let emailPredicate = NSPredicate(format:"SELF MATCHES %@", emailFormat)
        return emailPredicate.evaluate(with: text)
    }

    func isValidPassword(text : String) -> Bool{
        let capitalLetterRegEx  = ".*[A-Z]+.*"
        let texttest = NSPredicate(format:"SELF MATCHES %@", capitalLetterRegEx)
        let capitalresult = texttest.evaluate(with: text)


        let numberRegEx  = ".*[0-9]+.*"
        let texttest1 = NSPredicate(format:"SELF MATCHES %@", numberRegEx)
        let numberresult = texttest1.evaluate(with: text)


        let specialCharacterRegEx  = ".*[a-z]+.*"
        let texttest2 = NSPredicate(format:"SELF MATCHES %@", specialCharacterRegEx)

        let specialresult = texttest2.evaluate(with: text)

        let moreWhan6 = text.count > 6

        return capitalresult && numberresult && specialresult && moreWhan6
    }
}

protocol AuthorizationPresentationLogic {
    func emailWasChanged(currentEmail: String)
    func passwordWasChanged(currentPassword: String)

    func fogotPasswordButtonWasPressed()
    func loginWasPressed()
    func createAccountButtonWasPressed()
}

protocol AuthorizationDataStore {
    var email: String { get set }
    var password: String { get set }
}

class AuthorizationPresenter: AuthorizationPresentationLogic, AuthorizationDataStore {

    enum Texts: String {
        case fogotPassword = "Переход в форму восстановления пароля"
        case createAccount = "Переход в форму создания аккаунта"
    }

    var viewController: AuthorizationDisplayLogic?
    var interactor: AuthorizationBusinessLogic?
    var router: AuthorizationRoutingLogic?

    // MARK: AuthorizationDataStore
    var email: String = ""
    var password: String = ""

    // MARK: Params
    var validator = Validator()

    // MARK: AuthorizationPresentationLogic
    func emailWasChanged(currentEmail: String) {
        email = currentEmail
        checkRules()
    }

    func passwordWasChanged(currentPassword: String) {
        password = currentPassword
        checkRules()
    }

    // MARK: Logic
    private func checkRules() {
        if validator.isValidEmail(text: email) && validator.isValidPassword(text: password) {
            viewController?.allowLogin()
        } else {
            viewController?.denyLogin()
        }
    }

    // MARK: Routing
    func createAccountButtonWasPressed() {
        //router?.routeTo(target: .createAccount, usingNC: viewController?.navController)
        viewController?.showInfoAlert(Texts.createAccount.rawValue)
    }

    func fogotPasswordButtonWasPressed() {
        //router?.routeTo(target: .fogotPassword, usingNC: viewController?.navController)
        viewController?.showInfoAlert(Texts.fogotPassword.rawValue)
    }

    func loginWasPressed() {
        router?.routeTo(target: .weather, usingNC: viewController?.navController)
    }
}
