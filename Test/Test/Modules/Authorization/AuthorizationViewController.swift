//
//  AutorizationViewController.swift
//  Test
//
//  Created by Сергей Вихляев on 24/02/2019.
//  Copyright (c) 2019 Сергей Вихляев. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol AuthorizationDisplayLogic: BaseViewNavigationProtocol, BaseViewProtocol {
    func allowLogin()
    func denyLogin()
}

class AuthorizationViewController: UIViewController, AuthorizationDisplayLogic {

    private let kKeyboardPresentationAnimationDuration: TimeInterval = 0.34

    enum Texts: String {
        case title = "Авторизация"
    }

    enum OpenFlag {
        case emailIsCorrect, passwordIsCorrect
    }

    // IBs
    @IBOutlet weak var viewWithForm: UIView!

    @IBOutlet weak var emailLabel: UILabel!
    @IBOutlet weak var emailTextField: UITextField!

    @IBOutlet weak var passwordLabel: UILabel!
    @IBOutlet weak var passwordTextField: UITextField!

    @IBOutlet weak var fogotPasswordButton: UIButton! {
        didSet {
            fogotPasswordButton.layer.cornerRadius = 4
            fogotPasswordButton.layer.borderWidth = 1
            fogotPasswordButton.layer.borderColor =  UIColor(red: 235/255, green: 235/255, blue: 235/255, alpha: 1).cgColor
        }
    }

    @IBOutlet weak var loginButton: UIButton! {
        didSet {
            loginButton.layer.cornerRadius = loginButton.frame.height / 2
            loginButton.titleLabel?.font = UIFont(name: "SFUIText-Medium", size: 15)
        }
    }

    @IBOutlet weak var createAccountButton: UIButton!

    @IBAction func someButtonWasPressed(_ sender: UIButton) {
        view.endEditing(true)

        switch sender {
        case fogotPasswordButton:
            presenter?.fogotPasswordButtonWasPressed()
        case loginButton:
            presenter?.loginWasPressed()
        case createAccountButton:
            presenter?.createAccountButtonWasPressed()
        default:
            print(#function)
        }
    }


    @IBOutlet weak var viewWithFormCenterVerticallyConstraint: NSLayoutConstraint!
    @IBOutlet weak var loginButtonTopConstraint: NSLayoutConstraint!
    @IBOutlet weak var bottomConstraintWithOutKeyboard: NSLayoutConstraint!
    @IBOutlet weak var bottomConstraintWithKeyboard: NSLayoutConstraint!

    @IBAction func someTextFieldWasChanged(_ sender: UITextField) {
        switch sender {
        case emailTextField:
            presenter?.emailWasChanged(currentEmail: sender.text!)
        case passwordTextField:
            presenter?.passwordWasChanged(currentPassword: sender.text!)
        default:
            print(#function)
        }
    }


    // MARK: BaseViewNavigationProtocol
    var navController: UINavigationController?
    static var kStoryboardID: String = String(describing: AuthorizationViewController.self)

    // MARK: Params
    var presenter: AuthorizationPresentationLogic?
    var tapGesture: UITapGestureRecognizer!
    var kbHeight: CGFloat?

    var openFlags: [OpenFlag :Bool] = [:]

    // MARK: Lifecycle
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        setupNavigationController()
    }

    override func viewDidLoad() {
        super.viewDidLoad()
        setupVC()
    }

    override func viewWillDisappear(_ animated: Bool) {
        super.viewWillDisappear(animated)
        self.title = ""
    }

    deinit {
        NotificationCenter.default.removeObserver(self)
        view.removeGestureRecognizer(tapGesture)
    }

    // MARK: Logick
    func allowLogin() {
        loginButton.isEnabled = true
        loginButton.backgroundColor = UIColor(red: 255/255, green: 155/255, blue: 0, alpha: 1)
        loginButton.tintColor = .white
    }

    func denyLogin() {
        loginButton.isEnabled = false
        loginButton.backgroundColor = UIColor(red: 239/255, green: 239/255, blue: 244/255, alpha: 1)
        loginButton.tintColor = .lightGray
    }

    // MARK: Setup
    private func setupVC() {
        // TextFields
        delegating()

        // Keyboard
        setupObserving()
        setupGestures()

        // UI
        denyLogin()
    }

    // MARK: BaseViewProtocol (support func-s)
    func showInfoAlert(_ info: String) {
        showAlert(withInfo: info)
    }

    func showErrorAlert(_ error: Error) {
        showAlert(withError: error)
    }
}

// MARK: Setup func-s
extension AuthorizationViewController {

    private func delegating() {
        emailTextField.delegate = self
        passwordTextField.delegate = self
    }

    private func setupNavigationController() {
        navController = navigationController
        self.title = Texts.title.rawValue
    }

    private func setupObserving() {
        NotificationCenter.default.addObserver(self, selector: #selector(AuthorizationViewController.keyboardWillShow), name: UIResponder.keyboardWillShowNotification, object: nil)
        NotificationCenter.default.addObserver(self, selector: #selector(AuthorizationViewController.keyboardWillHide), name: UIResponder.keyboardWillHideNotification, object: nil)
    }

    @objc func keyboardWillShow(notification: Notification) {

        if kbHeight == nil {
            let userInfo: NSDictionary = notification.userInfo! as NSDictionary
            let keyboardFrame: NSValue = userInfo.value(forKey: UIResponder.keyboardFrameEndUserInfoKey) as! NSValue
            let keyboardRectangle = keyboardFrame.cgRectValue
            kbHeight = keyboardRectangle.height
        }
        bottomConstraintWithKeyboard.constant = kbHeight! + 8

        self.viewWithFormCenterVerticallyConstraint.priority = .defaultLow
        self.loginButtonTopConstraint.priority = .defaultHigh
        self.bottomConstraintWithOutKeyboard.priority = .defaultLow
        self.bottomConstraintWithKeyboard.priority = .defaultHigh

        UIView.animate(withDuration: self.kKeyboardPresentationAnimationDuration) {
            self.view.layoutIfNeeded()
        }
    }

    @objc func keyboardWillHide(notification: Notification) {
        self.viewWithFormCenterVerticallyConstraint.priority = .defaultHigh
        self.loginButtonTopConstraint.priority = .defaultLow
        self.bottomConstraintWithOutKeyboard.priority = .defaultHigh
        self.bottomConstraintWithKeyboard.priority = .defaultLow

        UIView.animate(withDuration: self.kKeyboardPresentationAnimationDuration) {
            self.view.layoutIfNeeded()
        }
    }

    private func setupGestures() {
        tapGesture = UITapGestureRecognizer(target: self, action: #selector(viewWasTapped))
        view.addGestureRecognizer(tapGesture)
    }

    @objc private func viewWasTapped() {
        view.endEditing(true)
    }
}

// MARK: UITextFieldDelegate
extension AuthorizationViewController: UITextFieldDelegate {
    func textFieldShouldReturn(_ textField: UITextField) -> Bool {
        switch textField {
        case emailTextField:
            passwordTextField.becomeFirstResponder()
        case passwordTextField:
            textField.resignFirstResponder()
            if loginButton.isEnabled {
                presenter?.loginWasPressed()
            }
        default:
            print(#function)
        }
        return true
    }
}
